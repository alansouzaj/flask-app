Python -m http.server

Class:
	__attribute

Class._Class.__attribute
 
WSGI -> protocolo python 

virtualenvwrapper
# workon virtual_env_name

factories (callables) -> funcao que recebe um objeto e o devolve modificado
-> factories vao alterando o objeto como se estivessem em um esteira de producao, onde cada factory adiciona propriedades novas ao objeto ate que
ele saia no final da esteira

Em projetos Flask (exluindo ambientes de teste) -> nunca fazer "import app"

isort -> pacote para deixar imports na ordem correta

black -> ajudar a melhorar a formatacao do codigo

*** flask - application out of context ***
# Contextos

## 1 Configuracao

fase onde sao chamadas as factories, seta as configs, add hooks, etc

## 2 App Context
fase onde chama o flask run
pode executar testes, debug, hooks, etc

## 3 Request Context
onde e` feito o request. O flask cria uma thread separada para cada request, apos o retorno status da requisicao essa thread e` encerrada.
Apenas nesse contexto, geralmente nas factories das views, pode-se usar os objetos request e session.
Geralmente esse contexto dura microssegundos. O tempo entre o usuario fazer a requisicao e o server retornar a resposta.


Funcao vazia no python3:
... -> elipses !=  pass - NOOPS


#Gerenciamento de filas
python-rq
dramatiq
celery - too complex, for now.


#Make a package installable
Precisa editar o setup.py

roda - pip install . na mesma pasta do setup.py
roda - pip install -e . => modo editavel. Faz com que modificacoes sejam refletidas no pacote instalado, em realtime.
sendo necessario instalar apenas uma vez durante o desenvolvimento
roda - pip install -e .["dev"] -> alem do install_requires, instala tambem os pacotes listados no extras_require "dev"
version="0.1.0" # major, minor, patch
